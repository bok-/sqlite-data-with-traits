// @Table("\(String.sqliteDataCloudKitSchemaName)_recordTypes")
package struct RecordType: Hashable {
  // @Column(primaryKey: true)
  package let tableName: String
  package let schema: String
}

// NB: This is generated by inlining the above macro applications.
extension RecordType {
  public struct TableColumns: StructuredQueriesCore.TableDefinition, StructuredQueriesCore
      .PrimaryKeyedTableDefinition
  {
    public typealias QueryValue = RecordType
    public let tableName = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "tableName",
      keyPath: \QueryValue.tableName
    )
    public let schema = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "schema",
      keyPath: \QueryValue.schema
    )
    public var primaryKey: StructuredQueriesCore.TableColumn<QueryValue, String> {
      self.tableName
    }
    public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
      [QueryValue.columns.tableName, QueryValue.columns.schema]
    }
    public static var writableColumns: [any StructuredQueriesCore.WritableTableColumnExpression] {
      [QueryValue.columns.tableName, QueryValue.columns.schema]
    }
    public var queryFragment: QueryFragment {
      "\(self.tableName), \(self.schema)"
    }
  }

  public struct Draft: StructuredQueriesCore.TableDraft {
    public typealias PrimaryTable = RecordType
    package let tableName: String?
    package let schema: String
    public struct TableColumns: StructuredQueriesCore.TableDefinition {
      public typealias QueryValue = Draft
      public let tableName = StructuredQueriesCore.TableColumn<QueryValue, String?>(
        "tableName",
        keyPath: \QueryValue.tableName
      )
      public let schema = StructuredQueriesCore.TableColumn<QueryValue, String>(
        "schema",
        keyPath: \QueryValue.schema
      )
      public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
        [QueryValue.columns.tableName, QueryValue.columns.schema]
      }
      public static var writableColumns: [any StructuredQueriesCore.WritableTableColumnExpression] {
        [QueryValue.columns.tableName, QueryValue.columns.schema]
      }
      public var queryFragment: QueryFragment {
        "\(self.tableName), \(self.schema)"
      }
    }
    public static let columns = TableColumns()

    public static let tableName = RecordType.tableName

    public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
      self.tableName = try decoder.decode(String.self)
      let schema = try decoder.decode(String.self)
      guard let schema else {
        throw QueryDecodingError.missingRequiredColumn
      }
      self.schema = schema
    }

    public init(_ other: RecordType) {
      self.tableName = other.tableName
      self.schema = other.schema
    }
    public init(
      tableName: String? = nil,
      schema: String
    ) {
      self.tableName = tableName
      self.schema = schema
    }
  }
}

extension RecordType: StructuredQueriesCore.Table, StructuredQueriesCore.PrimaryKeyedTable {
  public static let columns = TableColumns()
  public static let tableName = "sqlitedata_icloud_recordTypes"
  public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
    let tableName = try decoder.decode(String.self)
    let schema = try decoder.decode(String.self)
    guard let tableName else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let schema else {
      throw QueryDecodingError.missingRequiredColumn
    }
    self.tableName = tableName
    self.schema = schema
  }
}
