import CloudKit

// @Table("stateSerialization")
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
struct StateSerialization {
  let id: Int
  var data: CKSyncEngine.State.Serialization
}

// NB: This is generated by inlining the above macro applications.
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
extension StateSerialization: StructuredQueriesCore.Table, StructuredQueriesCore.PrimaryKeyedTable {
  public struct TableColumns: StructuredQueriesCore.TableDefinition, StructuredQueriesCore
      .PrimaryKeyedTableDefinition
  {
    public typealias QueryValue = StateSerialization
    public let id = StructuredQueriesCore.TableColumn<QueryValue, Int>(
      "id",
      keyPath: \QueryValue.id
    )
    public let data = StructuredQueriesCore.TableColumn<
      QueryValue, CKSyncEngine.State.Serialization.JSONRepresentation
    >("data", keyPath: \QueryValue.data)
    public var primaryKey: StructuredQueriesCore.TableColumn<QueryValue, Int> {
      self.id
    }
    public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
      [QueryValue.columns.id, QueryValue.columns.data]
    }
  }
  public struct Draft: StructuredQueriesCore.TableDraft {
    public typealias PrimaryTable = StateSerialization
    let id: Int?
    var data: CKSyncEngine.State.Serialization
    public struct TableColumns: StructuredQueriesCore.TableDefinition {
      public typealias QueryValue = StateSerialization.Draft
      public let id = StructuredQueriesCore.TableColumn<QueryValue, Int?>(
        "id",
        keyPath: \QueryValue.id
      )
      public let data = StructuredQueriesCore.TableColumn<
        QueryValue, CKSyncEngine.State.Serialization.JSONRepresentation
      >("data", keyPath: \QueryValue.data)
      public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
        [QueryValue.columns.id, QueryValue.columns.data]
      }
    }
    public static let columns = TableColumns()
    public static let tableName = StateSerialization.tableName
    public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
      self.id = try decoder.decode(Int.self)
      let data = try decoder.decode(CKSyncEngine.State.Serialization.JSONRepresentation.self)
      guard let data else {
        throw QueryDecodingError.missingRequiredColumn
      }
      self.data = data
    }
    public init(_ other: StateSerialization) {
      self.id = other.id
      self.data = other.data
    }
    public init(
      id: Int? = nil,
      data: CKSyncEngine.State.Serialization
    ) {
      self.id = id
      self.data = data
    }
  }
  public static let columns = TableColumns()
  public static let tableName = "stateSerialization"
  public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
    let id = try decoder.decode(Int.self)
    let data = try decoder.decode(CKSyncEngine.State.Serialization.JSONRepresentation.self)
    guard let id else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let data else {
      throw QueryDecodingError.missingRequiredColumn
    }
    self.id = id
    self.data = data
  }
}
