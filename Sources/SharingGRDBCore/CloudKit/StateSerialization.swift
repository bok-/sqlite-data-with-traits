import CloudKit

// @Table("sharing_grdb_cloudkit_stateSerialization")
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
package struct StateSerialization {
  package var id = 1
  // @Column(as: CKSyncEngine.State.Serialization.JSONRepresentation.self)
  package var data: CKSyncEngine.State.Serialization
}

// NB: This is generated by inlining the above macro applications.
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
extension StateSerialization: StructuredQueriesCore.Table {
  public struct TableColumns: StructuredQueriesCore.TableDefinition {
    public typealias QueryValue = StateSerialization
    public let id = StructuredQueriesCore.TableColumn<QueryValue, Swift.Int>(
      "id",
      keyPath: \QueryValue.id,
      default: 1
    )
    public let data = StructuredQueriesCore.TableColumn<
      QueryValue, CKSyncEngine.State.Serialization.JSONRepresentation
    >("data", keyPath: \QueryValue.data)
    public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
      [QueryValue.columns.id, QueryValue.columns.data]
    }
  }
  public static let columns = TableColumns()
  public static let tableName = "sharing_grdb_cloudkit_stateSerialization"
  public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
    self.id = try decoder.decode(Swift.Int.self) ?? 1
    let data = try decoder.decode(CKSyncEngine.State.Serialization.JSONRepresentation.self)
    guard let data else {
      throw QueryDecodingError.missingRequiredColumn
    }
    self.data = data
  }
}
