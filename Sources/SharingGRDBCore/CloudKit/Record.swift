import CloudKit
import Foundation

extension CKRecord {
  struct DataRepresentation: QueryBindable, QueryRepresentable {
    let queryOutput: CKRecord

    var queryBinding: QueryBinding {
      let archiver = NSKeyedArchiver(requiringSecureCoding: true)
      queryOutput.encodeSystemFields(with: archiver)
      return archiver.encodedData.queryBinding
    }

    init(queryOutput: CKRecord) {
      self.queryOutput = queryOutput
    }

    init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
      guard let data = try Data?(decoder: &decoder) else {
        throw QueryDecodingError.missingRequiredColumn
      }
      let coder = try NSKeyedUnarchiver(forReadingFrom: data)
      coder.requiresSecureCoding = true
      guard let queryOutput = CKRecord(coder: coder) else {
        throw DecodingError()
      }
      self.init(queryOutput: queryOutput)
    }

    private struct DecodingError: Error {}
  }
}

extension CKRecord? {
  typealias DataRepresentation = CKRecord.DataRepresentation?
}

@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
// @Table("sharing_grdb_cloudkit_records")
struct Record {
  var zoneName: String
  var recordName: String
  // @Column(as: CKRecord.DataRepresentation.self)
  var recordData: CKRecord
  var localModificationDate: Date
}

// NB: This is generated by inlining the above macro applications.
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
extension Record: StructuredQueriesCore.Table {
  public struct TableColumns: StructuredQueriesCore.TableDefinition {
    public typealias QueryValue = Record
    public let zoneName = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "zoneName",
      keyPath: \QueryValue.zoneName
    )
    public let recordName = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "recordName",
      keyPath: \QueryValue.recordName
    )
    public let recordData = StructuredQueriesCore.TableColumn<
      QueryValue, CKRecord.DataRepresentation
    >("recordData", keyPath: \QueryValue.recordData)
    public let localModificationDate = StructuredQueriesCore.TableColumn<QueryValue, Date>(
      "localModificationDate",
      keyPath: \QueryValue.localModificationDate
    )
    public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
      [
        QueryValue.columns.zoneName, QueryValue.columns.recordName, QueryValue.columns.recordData,
        QueryValue.columns.localModificationDate,
      ]
    }
  }
  public static let columns = TableColumns()
  public static let tableName = "sharing_grdb_cloudkit_records"
  public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
    let zoneName = try decoder.decode(String.self)
    let recordName = try decoder.decode(String.self)
    let recordData = try decoder.decode(CKRecord.DataRepresentation.self)
    let localModificationDate = try decoder.decode(Date.self)
    guard let zoneName else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let recordName else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let recordData else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let localModificationDate else {
      throw QueryDecodingError.missingRequiredColumn
    }
    self.zoneName = zoneName
    self.recordName = recordName
    self.recordData = recordData
    self.localModificationDate = localModificationDate
  }
}
