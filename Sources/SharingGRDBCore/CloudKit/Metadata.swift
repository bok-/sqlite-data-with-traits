import CloudKit

@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
// @Table("sharing_grdb_cloudkit_metadata")
package struct Metadata {
  package var zoneName: String
  package var recordName: String
  // @Column(as: CKRecord?.DataRepresentation.self)
  package var lastKnownServerRecord: CKRecord?
  package var userModificationDate: Date?
}

// NB: This is generated by inlining the above macro applications.
@available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)
extension Metadata: StructuredQueriesCore.Table {
  public struct TableColumns: StructuredQueriesCore.TableDefinition {
    public typealias QueryValue = Metadata
    public let zoneName = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "zoneName",
      keyPath: \QueryValue.zoneName
    )
    public let recordName = StructuredQueriesCore.TableColumn<QueryValue, String>(
      "recordName",
      keyPath: \QueryValue.recordName
    )
    public let lastKnownServerRecord = StructuredQueriesCore.TableColumn<
      QueryValue, CKRecord?.DataRepresentation
    >("lastKnownServerRecord", keyPath: \QueryValue.lastKnownServerRecord)
    public let userModificationDate = StructuredQueriesCore.TableColumn<QueryValue, Date?>(
      "userModificationDate",
      keyPath: \QueryValue.userModificationDate
    )
    public static var allColumns: [any StructuredQueriesCore.TableColumnExpression] {
      [
        QueryValue.columns.zoneName, QueryValue.columns.recordName,
        QueryValue.columns.lastKnownServerRecord, QueryValue.columns.userModificationDate,
      ]
    }
  }
  public static let columns = TableColumns()
  public static let tableName = "sharing_grdb_cloudkit_metadata"
  public init(decoder: inout some StructuredQueriesCore.QueryDecoder) throws {
    let zoneName = try decoder.decode(String.self)
    let recordName = try decoder.decode(String.self)
    let lastKnownServerRecord = try decoder.decode(CKRecord?.DataRepresentation.self)
    self.userModificationDate = try decoder.decode(Date.self)
    guard let zoneName else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let recordName else {
      throw QueryDecodingError.missingRequiredColumn
    }
    guard let lastKnownServerRecord else {
      throw QueryDecodingError.missingRequiredColumn
    }
    self.zoneName = zoneName
    self.recordName = recordName
    self.lastKnownServerRecord = lastKnownServerRecord
  }
}
